---
import BaseLayout from '../../components/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import WhatsAppButton from '../../components/WhatsAppButton.astro';
import { getCollection } from 'astro:content';
import { generateBlogPostSchema, generateBreadcrumbSchema } from '../../utils/seo';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => !data.draft);
  return posts.map((p) => ({ params: { slug: p.slug } }));
}

const slugParam = Astro.params.slug;
const slug = Array.isArray(slugParam) ? slugParam.join('/') : slugParam;

const posts = await getCollection('blog', ({ data }) => !data.draft);
const post = posts.find(p => p.slug === slug);

if (!post) {
  throw new Error(`Blog post not found for slug: ${slug}`);
}

const { Content } = await post.render();

const breadcrumb = generateBreadcrumbSchema([
  { name: 'Beranda', url: '/' },
  { name: 'Blog', url: '/blog' },
  { name: post.data.title, url: `/blog/${post.slug}` }
]);

const jsonLd = generateBlogPostSchema({
  title: post.data.title,
  excerpt: post.data.description,
  image: post.data.image,
  publishDate: post.data.pubDate.toISOString(),
  slug: post.slug
});

// Related posts (same category or shared tags)
const related = posts
  .filter(p => p.slug !== post.slug)
  .filter(p => p.data.category === post.data.category || p.data.tags.some(t => post.data.tags.includes(t)))
  .slice(0, 3);
---

<BaseLayout title={post.data.title} description={post.data.description} jsonLd={[jsonLd, breadcrumb]}>
  <Header slot="header" />

  <!-- Header Section -->
  <section class="bg-button text-white py-16">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <nav class="text-sm mb-4 text-white/80">
        <a href="/" class="hover:underline">Beranda</a> /
        <a href="/blog" class="hover:underline">Blog</a> /
        <span class="opacity-90">{post.data.title}</span>
      </nav>
      <span class="inline-block bg-white/20 text-white text-xs px-2 py-1 rounded-full font-medium mb-3">{post.data.category}</span>
      <h1 class="text-3xl lg:text-4xl font-bold mb-3">{post.data.title}</h1>
      <div class="flex flex-wrap items-center gap-3 text-white/90">
        <span>{new Date(post.data.pubDate).toLocaleDateString('id-ID', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
        <span>•</span>
        <span>{post.data.readTime}</span>
        {post.data.author && (<span>•</span>)}
        {post.data.author && (<span>Oleh {post.data.author}</span>)}
      </div>
    </div>
  </section>

  <!-- Featured Image -->
  {post.data.image && (
    <section class="bg-background">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <img src={post.data.image} alt={post.data.title} class="w-full h-72 object-cover rounded-lg -mt-8 border-4 border-container" loading="eager" />
      </div>
    </section>
  )}

  <!-- Content -->
  <section class="py-12 bg-background">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <article class="prose prose-invert max-w-none">
        <Content />
      </article>

      <!-- Share & CTA -->
      <div class="mt-10 flex flex-col sm:flex-row gap-4">
        <WhatsAppButton 
          message={`Halo, saya membaca artikel \"${post.data.title}\" dan ingin konsultasi.`}
          className="bg-button hover:bg-highlight text-white hover:text-button px-8 py-3 rounded-lg font-semibold transition-colors"
          source="blog_detail"
        />
        <a 
          href="/contact/" 
          class="border-2 border-button text-button hover:bg-button hover:text-white px-8 py-3 rounded-lg font-semibold transition-colors text-center"
        >
          Request Quote
        </a>
      </div>
    </div>
  </section>

  <!-- Related Posts -->
  {related.length > 0 && (
    <section class="py-16 bg-container">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-2xl font-bold text-text-main mb-6">Artikel Terkait</h2>
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {related.map((item) => (
            <article class="bg-background rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
              {item.data.image && (
                <img src={item.data.image} alt={item.data.title} class="w-full h-40 object-cover" loading="lazy" />
              )}
              <div class="p-6">
                <div class="flex items-center justify-between mb-3">
                  <span class="inline-block bg-primary/20 text-primary text-xs px-2 py-1 rounded-full font-medium">{item.data.category}</span>
                  <span class="text-sm text-text-secondary">{item.data.readTime}</span>
                </div>
                <h3 class="text-lg font-bold text-text-main mb-2 line-clamp-2">
                  <a href={`/blog/${item.slug}/`} class="hover:text-button transition-colors">{item.data.title}</a>
                </h3>
                <p class="text-text-secondary line-clamp-3">{item.data.description}</p>
              </div>
            </article>
          ))}
        </div>
      </div>
    </section>
  )}

  <Footer slot="footer" />
</BaseLayout>

<style>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Keep styling minimal to preserve global look */
.prose :where(h1,h2,h3,h4){
  color: var(--tw-prose-headings, #fff);
}
</style>